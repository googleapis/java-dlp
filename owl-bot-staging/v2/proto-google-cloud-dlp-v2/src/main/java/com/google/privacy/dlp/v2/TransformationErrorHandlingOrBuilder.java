// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/privacy/dlp/v2/dlp.proto

package com.google.privacy.dlp.v2;

public interface TransformationErrorHandlingOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.privacy.dlp.v2.TransformationErrorHandling)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Throw an error
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.TransformationErrorHandling.ThrowError throw_error = 1;</code>
   * @return Whether the throwError field is set.
   */
  boolean hasThrowError();
  /**
   * <pre>
   * Throw an error
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.TransformationErrorHandling.ThrowError throw_error = 1;</code>
   * @return The throwError.
   */
  com.google.privacy.dlp.v2.TransformationErrorHandling.ThrowError getThrowError();
  /**
   * <pre>
   * Throw an error
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.TransformationErrorHandling.ThrowError throw_error = 1;</code>
   */
  com.google.privacy.dlp.v2.TransformationErrorHandling.ThrowErrorOrBuilder getThrowErrorOrBuilder();

  /**
   * <pre>
   * Ignore errors
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed leave_untransformed = 2;</code>
   * @return Whether the leaveUntransformed field is set.
   */
  boolean hasLeaveUntransformed();
  /**
   * <pre>
   * Ignore errors
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed leave_untransformed = 2;</code>
   * @return The leaveUntransformed.
   */
  com.google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed getLeaveUntransformed();
  /**
   * <pre>
   * Ignore errors
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed leave_untransformed = 2;</code>
   */
  com.google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformedOrBuilder getLeaveUntransformedOrBuilder();

  public com.google.privacy.dlp.v2.TransformationErrorHandling.ModeCase getModeCase();
}
